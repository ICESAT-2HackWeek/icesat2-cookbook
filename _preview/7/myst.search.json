{"version":"1","records":[{"hierarchy":{"lvl1":"ICESat-2 Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"ICESat-2 Cookbook"},"content":"","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"ICESat-2 Cookbook"},"type":"lvl1","url":"/#icesat-2-cookbook","position":2},{"hierarchy":{"lvl1":"ICESat-2 Cookbook"},"content":"\n\n\n\n\n\n\n\nThis Project Pythia Cookbook is a compilation of tutorials developed from 2019\nto present as part of the NASA / UW eScience hackweek program. The purpose of\nthe tutorials is to help people with data access and to demonstrate a variety\nof disciplinary use cases.","type":"content","url":"/#icesat-2-cookbook","position":3},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":4},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl2":"Motivation"},"content":"The ICESat-2 mission provides valuable data for measuring changes in glaciers,\nice sheets, sea ice, clouds and land surface systems. There are numerous data\nproducts and methods for accessing and analyzing data. The goal of these\ntutorials is to streamline data access, reduce duplication of effort and\nbuild an open science community around ICESat-2 algorithms and software.","type":"content","url":"/#motivation","position":5},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":6},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl2":"Authors"},"content":"Ben Smith,\n\n\nMichalea King,\n\n\nTyler Sutterley,\n\n\nAnthony Arendt,\n\n\nJessica Scheick,\n\n\nMark Welden-Smith\n\nmore to be added","type":"content","url":"/#authors","position":7},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":8},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":9},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":10},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl2":"Structure"},"content":"This cookbook is broken up into two main sections - “Foundations”\nand “Example Workflows.”","type":"content","url":"/#structure","position":11},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Section 1: Foundations","lvl2":"Structure"},"type":"lvl3","url":"/#section-1-foundations","position":12},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Section 1: Foundations","lvl2":"Structure"},"content":"Mission Overview\n\nData Access\n\nFiltering\n\nGeospatial Transforms\n\nIntegration\n\nCloud Computing\n\nMachine Learning\n\nVisualization","type":"content","url":"/#section-1-foundations","position":13},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Section 2: Example Workflows for Specific Disciplines","lvl2":"Structure"},"type":"lvl3","url":"/#section-2-example-workflows-for-specific-disciplines","position":14},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Section 2: Example Workflows for Specific Disciplines","lvl2":"Structure"},"content":"Land Ice\n\nSea Ice\n\nInland Hydrology\n\nBathymetry\n\nSnowdepth","type":"content","url":"/#section-2-example-workflows-for-specific-disciplines","position":15},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":16},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":17},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":18},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.\n\nNote, not all Cookbook chapters are executable. If you do not see\nthe rocket ship icon, such as on this page, you are not viewing an\nexecutable book chapter.","type":"content","url":"/#running-on-binder","position":19},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":20},{"hierarchy":{"lvl1":"ICESat-2 Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer,\nyou will need to follow this workflow:\n\nClone the https://github.com/ProjectPythia/icesat2-cookbook repository: git clone https://github.com/ProjectPythia/icesat2-cookbook.git\n\nMove into the icesat2-cookbook directorycd cookbook-example\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate icesat2-cookbook\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":21},{"hierarchy":{"lvl1":"Bathymetry Applications"},"type":"lvl1","url":"/notebooks/bathymetry","position":0},{"hierarchy":{"lvl1":"Bathymetry Applications"},"content":"","type":"content","url":"/notebooks/bathymetry","position":1},{"hierarchy":{"lvl1":"Bathymetry Applications","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/bathymetry#author-s","position":2},{"hierarchy":{"lvl1":"Bathymetry Applications","lvl2":"Author(s)"},"content":"Jonathan Markel","type":"content","url":"/notebooks/bathymetry#author-s","position":3},{"hierarchy":{"lvl1":"Bathymetry Applications","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/bathymetry#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Bathymetry Applications","lvl2":"Existing Notebooks"},"content":"Bathymetry Applications","type":"content","url":"/notebooks/bathymetry#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Bathymetry Applications","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/bathymetry#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Bathymetry Applications","lvl2":"Learning Outcomes"},"content":"Learn what ICESat-2 bathymetry looks like, where to find it, and how to\nvisualize it\n\nUnderstand pros / cons of different signal finding approaches for bathymetry\n\nExtract water surface and seafloor returns from the photon data\n\nApply refraction correction to subsurface photon heights","type":"content","url":"/notebooks/bathymetry#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Bathymetry Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/bathymetry#notes","position":8},{"hierarchy":{"lvl1":"Bathymetry Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"","type":"content","url":"/notebooks/bathymetry#notes","position":9},{"hierarchy":{"lvl1":"Cloud Computing"},"type":"lvl1","url":"/notebooks/cloud-computing","position":0},{"hierarchy":{"lvl1":"Cloud Computing"},"content":"","type":"content","url":"/notebooks/cloud-computing","position":1},{"hierarchy":{"lvl1":"Cloud Computing","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/cloud-computing#author-s","position":2},{"hierarchy":{"lvl1":"Cloud Computing","lvl2":"Author(s)"},"content":"Aimee Barciauskas, Tasha Snow","type":"content","url":"/notebooks/cloud-computing#author-s","position":3},{"hierarchy":{"lvl1":"Cloud Computing","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/cloud-computing#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Cloud Computing","lvl2":"Existing Notebooks"},"content":"Cloud Computing","type":"content","url":"/notebooks/cloud-computing#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Cloud Computing","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/cloud-computing#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Cloud Computing","lvl2":"Learning Outcomes"},"content":"What is cloud computing?\n\nWhat is cloud object storage and the difference between data stored in the\ncloud, data on a local file system and data stored in on-premise data centers.\n\nHow to optimize data for reading from cloud object storage.","type":"content","url":"/notebooks/cloud-computing#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Cloud Computing","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/cloud-computing#notes","position":8},{"hierarchy":{"lvl1":"Cloud Computing","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"Unsure whether to point parts of this to an existing CryoCloud tutorial.\nThe content specific to ICESat-2 definitely belongs here.","type":"content","url":"/notebooks/cloud-computing#notes","position":9},{"hierarchy":{"lvl1":"Data Access"},"type":"lvl1","url":"/notebooks/data-access","position":0},{"hierarchy":{"lvl1":"Data Access"},"content":"","type":"content","url":"/notebooks/data-access","position":1},{"hierarchy":{"lvl1":"Data Access","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/data-access#author-s","position":2},{"hierarchy":{"lvl1":"Data Access","lvl2":"Author(s)"},"content":"Rachel Wegener, Amy Steiker, Jessica Scheick, JP Swinski, many others","type":"content","url":"/notebooks/data-access#author-s","position":3},{"hierarchy":{"lvl1":"Data Access","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/data-access#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Data Access","lvl2":"Existing Notebooks"},"content":"Accessing ICESat-2 Data\n\n(assuming that the 2024 notebook is most updated for now)","type":"content","url":"/notebooks/data-access#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Data Access","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/data-access#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Data Access","lvl2":"Learning Outcomes"},"content":"learn about all the tools currently available for accessing ICESat-2 data,\nand the decisions that influence which one to choose\n\nlearn recommended best practices for data access depending on your application","type":"content","url":"/notebooks/data-access#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Data Access","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/data-access#notes","position":8},{"hierarchy":{"lvl1":"Data Access","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"Suggest we wait to work on these tutorials until after the 2025 Developers’\nHackweek in Seattle.","type":"content","url":"/notebooks/data-access#notes","position":9},{"hierarchy":{"lvl1":"Data Integration"},"type":"lvl1","url":"/notebooks/data-integration","position":0},{"hierarchy":{"lvl1":"Data Integration"},"content":"","type":"content","url":"/notebooks/data-integration","position":1},{"hierarchy":{"lvl1":"Data Integration","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/data-integration#author-s","position":2},{"hierarchy":{"lvl1":"Data Integration","lvl2":"Author(s)"},"content":"Michalea King, Tyler Sutterley, Ian Joughin, Zach Fair, Tasha Snow","type":"content","url":"/notebooks/data-integration#author-s","position":3},{"hierarchy":{"lvl1":"Data Integration","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/data-integration#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Data Integration","lvl2":"Existing Notebooks"},"content":"-\n\nData Integration Part 1\n\n-\n\nData Integration Part 2","type":"content","url":"/notebooks/data-integration#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Data Integration","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/data-integration#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Data Integration","lvl2":"Learning Outcomes"},"content":"Retrieve image mosaics from NSIDC\n\nSubset and view imagery with GrIMP and NISAR tools\n\nRetrieve customized ICESat-2 data with SlideRule\n\nSample imagery at ICESat-2 photon locations\n\nAccess NSIDC data sets and acquire IS-2 using icepyx\n\nAnalyze point and raster data together with IS-2\n\nAdvanced visualizations of multiple datasets","type":"content","url":"/notebooks/data-integration#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Data Integration","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/data-integration#notes","position":8},{"hierarchy":{"lvl1":"Data Integration","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"","type":"content","url":"/notebooks/data-integration#notes","position":9},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering"},"type":"lvl1","url":"/notebooks/filtering","position":0},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering"},"content":"\n\n","type":"content","url":"/notebooks/filtering","position":1},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Overview"},"type":"lvl3","url":"/notebooks/filtering#overview","position":2},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Overview"},"content":"The ICESat-2 land-ice product (ATL06) was designed to measure the heights of snow and ice surfaces.  But when we’re making these measurements, sometimes clouds get in the way, and the measured heights aren’t as precise or accurate as we would like. This tutorial covers some of the reasons you might see weird results over ice when clouds start to blot out the surface signals.  The learning objectives I’d like to get to are:\n\nUnderstanding how clouds affect laser-altimetry signals\n\nRecognizing how these effects are manifest in the ATL06 product\n\nGaining familiarity with the ATL06 parameters that can identify cloudy returns\n\n","type":"content","url":"/notebooks/filtering#overview","position":3},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Prerequisites","lvl3":"Overview"},"type":"lvl4","url":"/notebooks/filtering#prerequisites","position":4},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Prerequisites","lvl3":"Overview"},"content":"Concepts\n\nImportance\n\nNotes\n\npandas\n\nNecessary\n\nICESat-2 data in this tutorial will appear as geopandas dataframes\n\nnumpy/matplotlib\n\nNecessary\n\nWe will do our plotting with matplotlib\n\nICESat-2 Mission Overview\n\nNecessary\n\nHere is where to go to understand the ICESat-2 mission and its goals\n\nTime to learn:  30 min.\n\nTip\n\nThis tutorial was developed on CryoCloud under the default environment.  If you’re using CryoCloud, you’ll need to pick an instance that uses at least 7 GB of memory to keep the kernel from running out of memory and resetting.\n\n\n\n","type":"content","url":"/notebooks/filtering#prerequisites","position":5},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Imports"},"type":"lvl3","url":"/notebooks/filtering#imports","position":6},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Imports"},"content":"We’ll use the \n\nSlideRule computational platfrom to access ATL06 segments and ATL03 photons, and will use an image of the ice shelf from the REMA project to visualize the location.\n\n# General packages for the tutorial\nimport pprint\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport geopandas as gpd\n%matplotlib widget\n\n# packages needed for the basemap \nimport PIL.Image\nimport urllib.request\nimport urllib.parse\n\n#sliderule\nfrom sliderule import icesat2\nimport sliderule\n# We'll initialize sliderule with the verbosity flag set to 'False.'  If you like to see lots of text scrolling by, set it to 'True'\nicesat2.init(\"slideruleearth.io\", False)\n\n","type":"content","url":"/notebooks/filtering#imports","position":7},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl2":"Background: ATL06 signal processing"},"type":"lvl2","url":"/notebooks/filtering#background-atl06-signal-processing","position":8},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl2":"Background: ATL06 signal processing"},"content":"\n\nRecall that ATL06 gives us surface heights based on the heights of collections of photons in a 40-m (horizontal) by w_surface_window (vertical) window.  It uses a variety of techniques to shrink the window to the smallest size that contains the surface without clipping off any signal photons.\n\nThere’s a general philosophy that went into the design of ATL06:\n\nUse the best available information to identiy the surface\n\nIf there’s a chance that we’ve found a weak surface return, report it\n\nProvide enough parameters that users can decide which returns are worth using, and which are not\n\nWhen there are no thick clouds between ICESat-2 and the surface, finding the surface return and reporting its height is straightforward: ATL03 provides a tight cluster of high-confidence photons, and ATL06 calculates a weighted average of their heights.\n\nOnce clouds start to block some of the laser light, the number of photons that return to ATLAS from each return becomes progressively smaller.  Unfortunately, even if there are no laser photons to measure, during daylight there is no shortage of other photons to track, which come primarily from sunlight reflecting ground and from clouds.  ATLAS does a very good job of filtering out almost all of these photons, but on a sunny day, over a white surface, the measured background rate can be as high as 12 MHz.  Converting to dimensions that we’ll be seeing this is:\\frac{1.2\\times10^7 photons}{second} \\times \\frac{1 second}{1.5\\times10^8 m} = \\frac{1 photon}{12.5 m}\n\nThis doesn’t sound like a lot, but over a 10-meter-high window that’s 40 m long (typical for the kind of windows you might use to look for the surface if you didn’t know where to find it) we can expect to find 45 photons.\n\nUnlike surface-return photons, background photons are uniformally distributed in height, and any clustering of these photons will be due to random chance.  When the signal quality is marginal, ATL03 may flag photons only as low- and medium- confidence for a particular segment, or may flag no photons at all.  If ATL03 hasn’t told ATL06 which photons are the surface, the algorithm uses a backup signal-finding strategy that initializes surface finding using the strongest cluster of photons available.  It then attempts to converge its surface window on a tight cluster of photons.  This occasionally works, but if there really is no signal, the size of the window generally remains large, and we can evaluate the results based on the signal-to-noise ratio (SNR) of whatever ends up inside the window.  Only those segments with at least 10 photons, for which the probability of converging to an SNR equal to the observed SNR or better for random-noise inputs is less thatn 5% are reported.  This cuts down on false positives considerably.\n\nLet’s take a look at some data from Antarctica to see what different problematic data might look like.\n\n","type":"content","url":"/notebooks/filtering#background-atl06-signal-processing","position":9},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Geographic Setting","lvl2":"Background: ATL06 signal processing"},"type":"lvl3","url":"/notebooks/filtering#geographic-setting","position":10},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Geographic Setting","lvl2":"Background: ATL06 signal processing"},"content":"We’ll be working on Cook Ice Shelf, a heavily crevassed and rifted ice shelf that drains East Antarctica.  I’ve defined a polygon that covers the transition between grounded ice (at the top) floating ice (within the polygon).  The region we’ll be working in is about 70 km x 60 km, and is covered by 20-30 ICESat-2 repeat tracks.  We can get an image of the shelf from the ArcticDEM project, using a urllib-based request.  Note: This code can be used to obtain a basic image for almost anywhere in the Arctic and Antarctic, which might be helpful in other work.\n\nThe location information is stored in a kml file in the assets directory, but you can substitute your own kml if you’d like to look at data from somewhere else.  Just make sure not to make your query too large to avoid running out of memory.\n\n# read in a polygon defining our area of interest:\ndf = gpd.read_file('assets/filtering/Cook_subset.kml')\ngeom_xy = df.to_crs(3031).geometry[0]\ngeom_ll = df.geometry[0]\n\n# get a shaded relief DEM to use as a basemap. This uses the ArcticDEM image server.\n\nHOST = 'https://elevation2.arcgis.com/arcgis/rest/services/Polar/AntarcticDEM/ImageServer/exportImage?'\nparams = []\nparams.append('bboxSR=3031')\nparams.append('imageSR=3031')\nparams.append('format=jpgpng')\nparams.append('noDataInterpretation=esriNoDataMatchAll')\nparams.append('f=image')\n\n[xmin, xmax], [ymin, ymax] = np.array(geom_xy.bounds).reshape(2,2).T\n# include a little bit more area at the top:\nymax += 2.e4 \nbbox = f'{xmin},{ymin},{xmax},{ymax}'\nparams.append(f'bbox={urllib.parse.quote(bbox)}')\n\nimage_service_url = HOST + '&'.join(params)\nshaded_relief_img = {'data': np.array(PIL.Image.open(urllib.request.urlopen(image_service_url))),\n    'extent':[xmin, xmax, ymin, ymax]}\nplt.figure()\nplt.imshow(shaded_relief_img['data'], extent=shaded_relief_img['extent'])\nx_poly, y_poly, _ = [*np.c_[geom_xy.exterior.coords].T]\nplt.plot(x_poly, y_poly,'r')\n\nplt.gca().set_xlabel('polar-stereographic E, m')\nplt.gca().set_xlabel('polar-stereographic N, m')\n\n","type":"content","url":"/notebooks/filtering#geographic-setting","position":11},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"type":"lvl3","url":"/notebooks/filtering#icesat-2-data-over-cook-ice-shelf","position":12},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"content":"For this tutorial, we’ll use the SlideRule service to download ATL06 (height measurements) and ATL03 (photon clouds).  SlideRule offers a quick and efficient way to search for and access data for limited areas of the ice sheet without the need to subset or download entire granules of data.","type":"content","url":"/notebooks/filtering#icesat-2-data-over-cook-ice-shelf","position":13},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Preliminary data download","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"type":"lvl4","url":"/notebooks/filtering#preliminary-data-download","position":14},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Preliminary data download","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"content":"Let’s begin by looking at the distibution of tracks for the region, using the ATL06 (land-ice height) product. We’ll first request a subset of data covering 2020.  To run SlideRule, we need a polygon (defined as a list of dictionaries, each of which has a ‘lat’ and a ‘lon’ element) and a start and stop time.  We’ll use the ATL06sp endpoint, which subsets all the granules in the region for a standard set of ATL06 fields.  The polygon we’re using comes from a kml file called Cook_subset.kml, which is in the assets/filtering directory.  You can substitute your own file if you want to work on a different area.\n\n# Define a polygon in sliderule format.\npoly=[{'lat':jj[1], 'lon':jj[0]} for jj in geom_ll.exterior.coords]\n\n#Define the request (a dictionary of parameters, \n#see: https://slideruleearth.io/web/rtd/user_guide/icesat2.html#parameters\nsliderule_parms= {\n    \"poly\":poly,\n    \"t0\": \"2020-01-01T01:00:00Z\",\n    \"t1\": \"2021-01-01T01:01:01Z\",\n  }\n# submit the request, which should take 10-15 seconds\nD6=icesat2.atl06sp(sliderule_parms)\n# transform the output to polar stereographic coordinates\nD6.to_crs(3031, inplace=True)\n\n\nWe can take a look at the data that SlideRule returned to see what fields are present:\n\nD6\n\nThere are 21 columns here, which describe:\n\nsegment location (geometry)\n\nsegment location along-track coordinates ( x_atc, y_atc )\n\nsurface height and accuracy (h_li, h_li_sigma, atl06_quality_summary)\n\nsurface slope (dh_fit_dx, dh_fit_dy)\n\nsignal (r_eff, n_fit_photons)\n\ntrack and timing parameters (cycle, gt, cycle, spot, delta_time)\n\nThe list of fields is designed to cover almost all users’ needs, and we’ll only end up using a few of them in this tutorial.  Let’s look at the elevations (h_li) that came back in the current request in map view.\n\nplt.figure()\nax_scat = plt.gca()\nplt.imshow(shaded_relief_img['data'], extent=shaded_relief_img['extent'])\n\nxx=np.array(D6.geometry.x)\nyy=np.array(D6.geometry.y)\nhh = np.array(D6.h_li)\n\n# sort the data by abs(height) to make the outliers show up\nii=np.argsort(np.abs(hh))\nii=ii[np.isfinite(hh[ii])]\nh_scat=plt.scatter(xx[ii], yy[ii], 3,  c=hh[ii], clim=[-200, 200], cmap='RdBu')\nplt.colorbar(h_scat, label='h_li')\n\n# suggested area to look at a poorly performing segment:\nxl, yl = [np.array([1079194.72014081, 1080624.2833137 ]), np.array([-2089358.21884508, -2088030.7673274 ])]\n\nplt.plot(xl[[0, 0, 1, 1, 0]], yl[[0, 1, 1, 0, 0]],'--', color='palegreen', marker='*', linewidth=2)\n\nWe can see on this plot that most of the surface heights are close to sea level, but a few tracks are reporting heights that are probably far too high.","type":"content","url":"/notebooks/filtering#preliminary-data-download","position":15},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Selecting a track that has cloud problems","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"type":"lvl4","url":"/notebooks/filtering#selecting-a-track-that-has-cloud-problems","position":16},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Selecting a track that has cloud problems","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"content":"If you see a plot like this where there is a track that has problems, you need to figure out which track is affected.  To do this, you need to know which RGT (repeat ground track) has the problem, and which beams from that track are affected.\n\nOne way to do this is to use the zoom tool to find a track with large positive h_li values, and capture the axes x_lim and y_lim properties, then use the dataframe’s cx method to capture the subset of the dataframe within the axes.  You can do this by setting ‘interactive’ to True in the next cell.\n\nFor puruposes of making the tutorial run without any interaction, I’ve also defined some limits in the next cell, and I’ll be talking about the results that come from those limits.\n\nTip\n\nThe next cell is where you can change the ‘interactive’ variable to True, and use the zoom tool to find different tracks for which you can plot the ATL03 photons\n\n# if interactive is False, we'll use the xl, yl defined in the previous code cell\ninteractive=False\n\nif interactive:\n    xl=ax_scat.get_xlim() ; yl=ax_scat.get_ylim()\nD6_sub= D6.cx[xl[0]:xl[1], yl[0]:yl[1]]\nD6_sub\n\nIf you run this for the default region, you’ll see that there is one rgt (1259), and two gts (10 and 20) in the polygon.  Let’s do a plot of the height against the along-track coordinate:\n\nplt.figure()\nhs=plt.scatter(D6_sub.x_atc, D6_sub.h_li,5, c=D6_sub.cycle)\nplt.colorbar(hs, label='cycle_number')\nplt.gca().set_xlabel('along-track x (x_atc), m')\nplt.gca().set_ylabel('h, m')\n\n\nIf you’re using the default location, this plot shows heights near zero for cycle 8, and elevations far above and below the surface for cycles 7 and 9.  If we zoom in on cycle 8, we can see something that looks like ice-shelf terrain, so we can guess that this is probably “right” and cycles 7 and 9 are wrong.\n\n","type":"content","url":"/notebooks/filtering#selecting-a-track-that-has-cloud-problems","position":17},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Getting ATL03 data for a problematic track","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"type":"lvl4","url":"/notebooks/filtering#getting-atl03-data-for-a-problematic-track","position":18},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Getting ATL03 data for a problematic track","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"content":"The next step is to look at the ATL03 photon cloud for each cycle to see what has worked and what has not.\n\nTip\n\nIf you’re running in interactive mode, copy the track (RGT) and pair track from the subsetted dataframe above.\n\n# set the rgt and pair track here:\nthis_rgt=1259\nthis_track=1\n\n# Get ATL03.  this should take <1 minute to run.\n\nicesat2.init(\"slideruleearth.io\", True)\nsliderule_ATL03_parms= {\n    \"poly\":poly, \n    \"t0\": \"2020-01-01T01:00:00Z\",\n    \"t1\": \"2021-01-01T01:00:00Z\",\n    \"rgt\":this_rgt,\n    \"srt\":icesat2.SRT_LAND_ICE,\n    \"cnf\":-2,\n    \"track\": this_track,\n  }\n# run sliderule for track\nD3=sliderule.run('atl03x', sliderule_ATL03_parms).to_crs(3031)\n\n# make a subset for our geographic region\nD3_sub = D3.cx[xl[0]:xl[1], yl[0]:yl[1]]\n\nLet’s plot the photons from ATL03, and the segments from ATL06 for each beam in pair 1 for each cycle.\n\nNote that SlideRule has numeric codes for the different groundtracks, sogt=10 -> gt1l\n\ngt=20 -> gt1r\n\nThe SlideRule icesat2 module has ‘GT1L’,‘GT1R’,‘GT2L’ attributes that provide these numeric codes.\n\nhf, hax= plt.subplots(3, 2, layout='constrained', sharex=True, figsize=[8, 8])\n\nfor ax1, cycle in zip(hax, np.unique(np.array(D6_sub.cycle))):\n    for ax, gt in zip(ax1, np.unique(np.array(D6_sub['gt']))):\n        i3=(D3_sub['gt']==gt) & (D3_sub.cycle==cycle)\n        ax.plot(D3_sub.x_atc[i3], D3_sub.height[i3],'k.', markersize=1, label='ATL03')\n        i6=(D6_sub['gt']==gt) & (D6_sub.cycle==cycle)\n        ax.plot(D6_sub.x_atc[i6], D6_sub.h_li[i6],'.', color='steelblue', label='ATL06')\n        ax.set_title(f'cycle={cycle}, gt={gt}')\nhax[1, 1].legend()\n\nfor ax in hax[2,:]:\n    ax.set_xlabel('x_atc, m')\nfor ax in hax[:,0]:\n    ax.set_ylabel('WGS84 height, m')\n\nWe can see a few things going on here.  The photons in ATL03 come from vertical bands of data (telemetry bands) that the algorithms running onboard ATLAS have identified as possibly containing a ground return.  In some cases the algorithm is correct (e.g. cycle 8), in other cases it returns only a band of photons far from the ground (gt 10 for cycles 7 and 9) or returns a band of photons that contains the ground for which there is no usable return (gt 20 for cycles 7 and 9).\n\nWe can also see bands of photons above the ground in gt 10 for cycles 7 and 8: these are most likely clouds, and the photons in these bands are much farther apart than the photons from true ground returns (see cycle 8).\n\nAll of the tracks contain at least some background photons, which are uniformly distributed over the telemetry bands.  If you check the dates for the different cycles, you’ll see that cycle 7 comes from June (Antarctic winter), cycle 8 comes from mid September (late winter / early spring) and cycle 9 comes from mid December (high summer).  As a result, there are very few background photons in cycle 7, and very many in cycle 9.\n\n","type":"content","url":"/notebooks/filtering#getting-atl03-data-for-a-problematic-track","position":19},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Plotting ATL03 signal classifications","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"type":"lvl4","url":"/notebooks/filtering#plotting-atl03-signal-classifications","position":20},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl4":"Plotting ATL03 signal classifications","lvl3":"ICESat-2 data over Cook Ice Shelf","lvl2":"Background: ATL06 signal processing"},"content":"It’s instructive to see how the ATL03 classification algorithm sees these points.  Let’s do the plot again, but color code by signal classification.  These are stored in the ATL03 atl03_cnf field.  the confidence values are:\n\n-- -1: Events not associated with a specific surface type\n\n--  0: noise\n\n--  1: noise photons within a +-10 m vertical buffer of a detected photon\n\n--  2: low confidence signal\n\n--  3: medium confidence signal\n\n--  4: high confidence signal\n\nhf, hax= plt.subplots(3, 2, layout='constrained', sharex=True, figsize=[8, 8])\n\nfor ax1, cycle in zip(hax, np.unique(np.array(D6_sub.cycle))):\n    for ax, gt in zip(ax1, np.unique(np.array(D6_sub['gt']))):\n        for cnf, name, color in zip([-1, 0, 1, 2, 3, 4], ['unclassified', 'noise','buffer','low','medium','high'],['gray', 'black','skyblue','green','orange','red']):\n            i3=(D3_sub['gt']==gt) & (D3_sub.cycle==cycle) & (D3_sub.atl03_cnf==cnf)\n            ax.plot(D3_sub.x_atc[i3], D3_sub.height[i3],'.', markersize=1, color=color, label=name)\n        ax.set_title(f'cycle={cycle}, gt={gt}')\nhax[1, 0].legend()\n\nfor ax in hax[2,:]:\n    ax.set_xlabel('x_atc, m')\nfor ax in hax[:,0]:\n    ax.set_ylabel('WGS84 height, m')\n\nIf you zoom around a little bit, you’ll see that cycles 7 and 9 have essentially all photons classified as noise, but cycle 8 has a mixture of high-confidence and (for gt==20) medium/low photons.  The low - confidence photons come from places where the surface is unusually dim, probably because of cloud attenuation.\n\n","type":"content","url":"/notebooks/filtering#plotting-atl03-signal-classifications","position":21},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Relating cloud effects to ATL06 data parameters","lvl2":"Background: ATL06 signal processing"},"type":"lvl3","url":"/notebooks/filtering#relating-cloud-effects-to-atl06-data-parameters","position":22},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Relating cloud effects to ATL06 data parameters","lvl2":"Background: ATL06 signal processing"},"content":"Our problem comes when the ground return is not strong enough to trigger the signal finder, and we start to see triggers associated with:\n\nCloud tops\n\nRandom clusterings of background photons\n\nThese should both be statistically distinct from surface returns because:\n\nThe returns are less intense than a high-quality surface return\n\nThe photons are more widely vertcally spread than those in surface returns\n\nThe surface window cannot converge on a small vertical window around the surface\n\nSurface heights and slopes are not consistent between adjacent segments\n\nThere are a few ATL06 parameters that help quantify these distinctions.\n\nh_li_sigma : the estimated error in the surface-height estimate\n\nn_fit_photons : The number of photons found in each segment\n\nw_surface_window_final : The size of the converged surface window\n\nh_robust_sprd : A percentile-based estimate of the spread of the photons, corrected for background\n\nsnr : the observed signal-to-noise ratio for the selected photons\n\nsnr_significance : The estimated probability that a random clustering of photons would produce the observed SNR\n\ndh_fit_dx : the along-track segment slope\n\nr_eff : the effective reflectance of the surface\n\nThere’s one more parameter that puts a few of these ideas together, in /gtxx/land_ice_segments:\n\natl06_quality_summary : a combination of parameters (h_li_sigma, n_fit_photons/w_surface_window_final, and signal_selection_source).  Zero indicates a good segment, 1 indicates a possibly bad segment.\n\nFor most purposes selecting those points for which atl06_quality_summary==0 will filter out most of the bad returns.  Let’s regenerate the map of Cook ice shelf to see how this works:\n\nplt.figure()\nax_scat_clean = plt.gca()\nplt.imshow(shaded_relief_img['data'], extent=shaded_relief_img['extent'])\n\nxx=np.array(D6.geometry.x)\nyy=np.array(D6.geometry.y)\nhh = np.array(D6.h_li)\nqq = np.array(D6.atl06_quality_summary)\n\n# sort the data by abs(height) to make the outliers show up\nii=np.argsort(np.abs(hh))\n# here is where we filter out the atl06_quality_summary==1 points\nii=ii[np.isfinite(hh[ii]) & (qq[ii]==0)]\nh_scat_clean=plt.scatter(xx[ii], yy[ii], 3,  c=hh[ii], clim=[-200, 200], cmap='RdBu')\nplt.colorbar(h_scat_clean, label='h_li', extend='both')\n\n\nPresto!  all of the too-high and too-low returns from the first map are gone!\n\n\n\n","type":"content","url":"/notebooks/filtering#relating-cloud-effects-to-atl06-data-parameters","position":23},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Summary","lvl2":"Background: ATL06 signal processing"},"type":"lvl3","url":"/notebooks/filtering#summary","position":24},{"hierarchy":{"lvl1":"Cloud effects on ICESat-2 data,  and Data Filtering","lvl3":"Summary","lvl2":"Background: ATL06 signal processing"},"content":"We have taken a look at a location in Antarctica where ICESat-2 has (mostly) successfully measured surface elevations over an ice shelf.  The default code in the cells shows an example for one track, but by switching the ‘interactive’ variable above, you should be able to find different kinds features in the data.\n\nIf you have time, take a few minutes to go back to the first cell after Getting ATL03 data for a problematic track and set ‘interactive’ to True. Then you can try zooming in on the map to identify the different tracks, and downloading the ATL03 to go with them (see the cell marked “select your track here”). You should be able to find:* Clouds\n* Crevasses\n* Rifts in the ice shelf\n* Sea ice or open water.","type":"content","url":"/notebooks/filtering#summary","position":25},{"hierarchy":{"lvl1":"Geospatial Transforms"},"type":"lvl1","url":"/notebooks/geospatial-transforms","position":0},{"hierarchy":{"lvl1":"Geospatial Transforms"},"content":"","type":"content","url":"/notebooks/geospatial-transforms","position":1},{"hierarchy":{"lvl1":"Geospatial Transforms","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/geospatial-transforms#author-s","position":2},{"hierarchy":{"lvl1":"Geospatial Transforms","lvl2":"Author(s)"},"content":"Tyler Sutterley, Hannah Besso, Scott Henderson, David Shean","type":"content","url":"/notebooks/geospatial-transforms#author-s","position":3},{"hierarchy":{"lvl1":"Geospatial Transforms","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/geospatial-transforms#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Geospatial Transforms","lvl2":"Existing Notebooks"},"content":"Geospatial Transforms","type":"content","url":"/notebooks/geospatial-transforms#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Geospatial Transforms","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/geospatial-transforms#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Geospatial Transforms","lvl2":"Learning Outcomes"},"content":"Review fundamental concepts of geospatial coordinate reference systems (CRS)\n\nLearn how to access CRS metadata\n\nLearn basic coordinate transformations relevant to ICESat-2","type":"content","url":"/notebooks/geospatial-transforms#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Geospatial Transforms","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/geospatial-transforms#notes","position":8},{"hierarchy":{"lvl1":"Geospatial Transforms","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"Wondering if some of this could be added to Pythia Foundations notebooks.\nThe “relevance to ICESat-2” content seems particularly valuable.","type":"content","url":"/notebooks/geospatial-transforms#notes","position":9},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in this Project Pythia Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1},{"hierarchy":{"lvl1":"Inland Hydrology Applications"},"type":"lvl1","url":"/notebooks/inland-hydrology","position":0},{"hierarchy":{"lvl1":"Inland Hydrology Applications"},"content":"","type":"content","url":"/notebooks/inland-hydrology","position":1},{"hierarchy":{"lvl1":"Inland Hydrology Applications","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/inland-hydrology#author-s","position":2},{"hierarchy":{"lvl1":"Inland Hydrology Applications","lvl2":"Author(s)"},"content":"Shamsudeen Temitope Yekeen","type":"content","url":"/notebooks/inland-hydrology#author-s","position":3},{"hierarchy":{"lvl1":"Inland Hydrology Applications","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/inland-hydrology#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Inland Hydrology Applications","lvl2":"Existing Notebooks"},"content":"Inland Hydrology Applications","type":"content","url":"/notebooks/inland-hydrology#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Inland Hydrology Applications","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/inland-hydrology#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Inland Hydrology Applications","lvl2":"Learning Outcomes"},"content":"Understanding the ICESat-2 ATL13 product and its usage in inland hydrology\n\nAbility to access and extract required subset variables ATL13 data product\n\nParticipants would be able to create a water surface elevation dynamics","type":"content","url":"/notebooks/inland-hydrology#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Inland Hydrology Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/inland-hydrology#notes","position":8},{"hierarchy":{"lvl1":"Inland Hydrology Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"","type":"content","url":"/notebooks/inland-hydrology#notes","position":9},{"hierarchy":{"lvl1":"Land Ice Applications"},"type":"lvl1","url":"/notebooks/land-ice","position":0},{"hierarchy":{"lvl1":"Land Ice Applications"},"content":"","type":"content","url":"/notebooks/land-ice","position":1},{"hierarchy":{"lvl1":"Land Ice Applications","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/land-ice#author-s","position":2},{"hierarchy":{"lvl1":"Land Ice Applications","lvl2":"Author(s)"},"content":"Ben Smith","type":"content","url":"/notebooks/land-ice#author-s","position":3},{"hierarchy":{"lvl1":"Land Ice Applications","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/land-ice#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Land Ice Applications","lvl2":"Existing Notebooks"},"content":"Land Ice Applications","type":"content","url":"/notebooks/land-ice#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Land Ice Applications","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/land-ice#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Land Ice Applications","lvl2":"Learning Outcomes"},"content":"learn how ice-sheet surfaces are represented by ATL03 photons\n\nlearn how ATL06 elevations correspond to ATL03 photon clouds\n\nlearn how small-scale features appear in ATL06\n\nunderstand the repeat structure of ATL06\n\nunderstand how cross-track slope can affect elevation differences","type":"content","url":"/notebooks/land-ice#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Land Ice Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/land-ice#notes","position":8},{"hierarchy":{"lvl1":"Land Ice Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"","type":"content","url":"/notebooks/land-ice#notes","position":9},{"hierarchy":{"lvl1":"Machine Learning"},"type":"lvl1","url":"/notebooks/machine-learning","position":0},{"hierarchy":{"lvl1":"Machine Learning"},"content":"","type":"content","url":"/notebooks/machine-learning","position":1},{"hierarchy":{"lvl1":"Machine Learning","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/machine-learning#author-s","position":2},{"hierarchy":{"lvl1":"Machine Learning","lvl2":"Author(s)"},"content":"Yara Mohajerani, Shane Grigsby, Wei Ji Leong","type":"content","url":"/notebooks/machine-learning#author-s","position":3},{"hierarchy":{"lvl1":"Machine Learning","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/machine-learning#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Machine Learning","lvl2":"Existing Notebooks"},"content":"ML with ICESat-2 Data\n\nML Neural Networks, Bayesian","type":"content","url":"/notebooks/machine-learning#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Machine Learning","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/machine-learning#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Machine Learning","lvl2":"Learning Outcomes"},"content":"Convert ICESat-2 point cloud data into an analysis/ML-ready format\n\nRecognize the different levels of complexity of ML approaches and\nthe benefits/challenges of each\n\nLearn the potential of using ML for ICESat-2 point cloud classification","type":"content","url":"/notebooks/machine-learning#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Machine Learning","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/machine-learning#notes","position":8},{"hierarchy":{"lvl1":"Machine Learning","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"Probably focus on Wei Ji’s tutorial, but could point to the earlier work\nof Yara and Shane for more advanced/theoretical concepts?","type":"content","url":"/notebooks/machine-learning#notes","position":9},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview"},"type":"lvl1","url":"/notebooks/mission-overview","position":0},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview"},"content":"","type":"content","url":"/notebooks/mission-overview","position":1},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl3":"Author(s)"},"type":"lvl3","url":"/notebooks/mission-overview#author-s","position":2},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl3":"Author(s)"},"content":"Tyler Sutterley\n\nExisting Tutorials\n\nMission Overview - 2024 ICESat-2 hackweek\n\nMission Overview and Data - 2023 ICESat-2 hackweek\n\nLearning Outcomes\n\nunderstand the technology used to acquire ICESat-2 data products and how that\ninforms data coverage, resolution and frequency\n\nlearn about the hierarchy of data products and the factors influencing\ndecisions on which products to use\n\n","type":"content","url":"/notebooks/mission-overview#author-s","position":3},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl2","url":"/notebooks/mission-overview#part-1-mission-and-instrument-overview","position":4},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl2":"Part 1: Mission and Instrument Overview"},"content":"\n\n","type":"content","url":"/notebooks/mission-overview#part-1-mission-and-instrument-overview","position":5},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Science Objectives","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-science-objectives","position":6},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Science Objectives","lvl2":"Part 1: Mission and Instrument Overview"},"content":"Quantify polar ice sheet contributions to current and recent sea level change and the linkages to climate conditions\n\nQuantify regional signatures of ice sheet changes\n\nAssess mechanisms driving recent changes\n\nImprove predictive ice sheet models\n\nEstimate sea ice thickness to examine ice-ocean-atmosphere exchanges of energy, mass and moisture\n\nMeasure vegetation canopy height as a basis for estimating large-scale biomass and biomass change\n\n\n\n","type":"content","url":"/notebooks/mission-overview#icesat-2-science-objectives","position":7},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"Advanced Topographic Laser Altimeter System (ATLAS)","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#advanced-topographic-laser-altimeter-system-atlas","position":8},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"Advanced Topographic Laser Altimeter System (ATLAS)","lvl2":"Part 1: Mission and Instrument Overview"},"content":"\n\nFigure 1:ICESat-2 beam configuration \n\n(Neuenschwander, 2019)\n\nSingle 10kHz 532nm laser micro-pulse → split into 6 beams\n\nDetectors sensitive to green light returns at the single photon level\n\nOn-the-ground 3 km spacing between pairs to increase spatial coverage\n\nOn-the-ground 90 m pair spacing for slope determination\n\nDifferent beam energies to provide dynamic range for varying surface reflectances\n\nHigh-energy beams (4×) for better performance over low-reflectivity targets\n\n","type":"content","url":"/notebooks/mission-overview#advanced-topographic-laser-altimeter-system-atlas","position":9},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATLAS Transmitter","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#atlas-transmitter","position":10},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATLAS Transmitter","lvl2":"Part 1: Mission and Instrument Overview"},"content":"\n\nFigure 2:ATLAS transmitter diagram (ATL03 ATBD)\n\n","type":"content","url":"/notebooks/mission-overview#atlas-transmitter","position":11},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATLAS Receiver","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#atlas-receiver","position":12},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATLAS Receiver","lvl2":"Part 1: Mission and Instrument Overview"},"content":"\n\nFigure 3:ATLAS receiver diagram (ATL03 ATBD)\n\n","type":"content","url":"/notebooks/mission-overview#atlas-receiver","position":13},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATLAS Photon Timing","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#atlas-photon-timing","position":14},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATLAS Photon Timing","lvl2":"Part 1: Mission and Instrument Overview"},"content":"\n\nFigure 4:ATLAS photon timing diagram (ATL03 ATBD)\n\n","type":"content","url":"/notebooks/mission-overview#atlas-photon-timing","position":15},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Photon Geolocation","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-photon-geolocation","position":16},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Photon Geolocation","lvl2":"Part 1: Mission and Instrument Overview"},"content":"","type":"content","url":"/notebooks/mission-overview#icesat-2-photon-geolocation","position":17},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Photon time of flight","lvl4":"ICESat-2 Photon Geolocation","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl5","url":"/notebooks/mission-overview#photon-time-of-flight","position":18},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Photon time of flight","lvl4":"ICESat-2 Photon Geolocation","lvl2":"Part 1: Mission and Instrument Overview"},"content":"Measuring the two-way return time of transmitted photons","type":"content","url":"/notebooks/mission-overview#photon-time-of-flight","position":19},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Position of observatory in space","lvl4":"ICESat-2 Photon Geolocation","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl5","url":"/notebooks/mission-overview#position-of-observatory-in-space","position":20},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Position of observatory in space","lvl4":"ICESat-2 Photon Geolocation","lvl2":"Part 1: Mission and Instrument Overview"},"content":"Precision Orbit Determination (POD) – NASA GSFC\n\nBased on Ruag GPS receivers\n\nVerified with Satellite Laser Ranging (SLR)\n\nOrbit known to < 2 cm radial","type":"content","url":"/notebooks/mission-overview#position-of-observatory-in-space","position":21},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Pointing vectors for ATLAS laser beams","lvl4":"ICESat-2 Photon Geolocation","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl5","url":"/notebooks/mission-overview#pointing-vectors-for-atlas-laser-beams","position":22},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Pointing vectors for ATLAS laser beams","lvl4":"ICESat-2 Photon Geolocation","lvl2":"Part 1: Mission and Instrument Overview"},"content":"Precision Pointing Determination (PPD) – UT Austin Applied Research Lab\n\nBased on Sodern Star Trackers and Laser Reference System (LRS)\n\nVerified with cal/val data comparisons with photon returns\n\nPutting the pieces together\n\nPhoton TOF + POD + PPD →\nphoton return bounce point\n\n","type":"content","url":"/notebooks/mission-overview#pointing-vectors-for-atlas-laser-beams","position":23},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Primary Measurements","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-primary-measurements","position":24},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Primary Measurements","lvl2":"Part 1: Mission and Instrument Overview"},"content":"\n\nFigure 5:ICESat-2 measurement schematic (ATL02 ATBD)\n\n","type":"content","url":"/notebooks/mission-overview#icesat-2-primary-measurements","position":25},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Orbits","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-orbits","position":26},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Orbits","lvl2":"Part 1: Mission and Instrument Overview"},"content":"500 km altitude\n\n88° S to 88° N\n\n15 revolutions/day\n\n1387 repeat ground tracks\n\n91-day revisit time\n\n\n\nFigure 6:ICESat-2 Orbits (NASA Science Visualization Studio)\n\nTip\n\nkml files with predicted ground tracks available at \n\nhttps://​icesat​-2​.gsfc​.nasa​.gov\n\n","type":"content","url":"/notebooks/mission-overview#icesat-2-orbits","position":27},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Along-Track Sampling","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-along-track-sampling","position":28},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Along-Track Sampling","lvl2":"Part 1: Mission and Instrument Overview"},"content":"\n\nFigure 7:ICESat-2 beam configuration \n\n(Smith et al., 2019)\n\n","type":"content","url":"/notebooks/mission-overview#icesat-2-along-track-sampling","position":29},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"Spacecraft Orientation","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#spacecraft-orientation","position":30},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"Spacecraft Orientation","lvl2":"Part 1: Mission and Instrument Overview"},"content":"\n\nFigure 8:ICESat-2 spacecraft orientation (NSIDC)\n\n","type":"content","url":"/notebooks/mission-overview#spacecraft-orientation","position":31},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Local Coordinate System","lvl2":"Part 1: Mission and Instrument Overview"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-local-coordinate-system","position":32},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Local Coordinate System","lvl2":"Part 1: Mission and Instrument Overview"},"content":"Along-track coordinates, x_atc, are measured parallel to each RGT and are in reference to the equator\n\nAcross-track coordinates, y_atc, are measured perpendicular to and in reference to the RGT\n\nAveraging Schemes:\n\nMeasurements can be averaged over a set along-track distance\n\nMeasurements can be averaged over a set number of photons and have a variable along-track length\n\n\n\nFigure 9:ICESat-2 coordinate system (ATL06 ATBD)\n\n","type":"content","url":"/notebooks/mission-overview#icesat-2-local-coordinate-system","position":33},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl2":"Part 2: Data Products"},"type":"lvl2","url":"/notebooks/mission-overview#part-2-data-products","position":34},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl2":"Part 2: Data Products"},"content":"\n\n","type":"content","url":"/notebooks/mission-overview#part-2-data-products","position":35},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Data Production","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-data-production","position":36},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Data Production","lvl2":"Part 2: Data Products"},"content":"\n\nData Production Keywords:\n\nATLAS: Advanced Topographic Laser Altimeter System\n\nASAS: ATLAS Science Algorithm Software\n\nPGE: Product Generation Executive\n\nSIPS: Science Investigator-led Processing System\n\nSCF: Science Computing Facility\n\n","type":"content","url":"/notebooks/mission-overview#icesat-2-data-production","position":37},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Product Chart","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-product-chart","position":38},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Product Chart","lvl2":"Part 2: Data Products"},"content":"\n\n","type":"content","url":"/notebooks/mission-overview#icesat-2-product-chart","position":39},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"Granule Regions","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#granule-regions","position":40},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"Granule Regions","lvl2":"Part 2: Data Products"},"content":"Each orbit of ICESat-2 data is broken up into 14 granules in order to limit the overall file sizes and to reduce the number of files that need to be processed to create the higher-level science products\n\n","type":"content","url":"/notebooks/mission-overview#granule-regions","position":41},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"File Naming Conventions","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#file-naming-conventions","position":42},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"File Naming Conventions","lvl2":"Part 2: Data Products"},"content":"ATL[xx]_[yyyymmdd][hhmmss]_[tttt][cc][nn]_[rrr]_[vv].h5\n\nxx: ATLAS product number\n\nyyyymmdd: year, month and day of data acquisition\n\nhhmmss: start time, hour, minute, and second of data acquisition (UTC)\n\ntttt: Reference Ground Track (RGT, ranges from 1–1387)\n\ncc: Orbital Cycle (91-day period)\n\nnn: Granule number (ranges from 1–14, always 01 for atmosphere products)\n\nrrr: Data release number\n\nvv: Data version number\n\nTip\n\nused for ATL03, ATL04, ATL06, ATL08, ATL09, ATL10, ATL12, ATL13, ATL16, ATL17, ATL19, ATL22 and ATL24\n\n","type":"content","url":"/notebooks/mission-overview#file-naming-conventions","position":43},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"File Naming Conventions: Sea Ice","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#file-naming-conventions-sea-ice","position":44},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"File Naming Conventions: Sea Ice","lvl2":"Part 2: Data Products"},"content":"ATL[xx]-[hh]_[yyyymmdd][hhmmss]_[tttt][cc][nn]_[rrr]_[vv].h5\n\nxx: ATLAS product number\n\nhh: Sea ice hemisphere flag (01=north, 02=south)\n\nyyyymmdd: year, month and day of data acquisition\n\nhhmmss: start time, hour, minute, and second of data acquisition (UTC)\n\ntttt: Reference Ground Track (RGT, ranges from 1–1387)\n\ncc: Orbital Cycle (91-day period)\n\nnn: Granule number (always 01 for sea ice products)\n\nrrr: Data release number\n\nvv: Data version number\n\nTip\n\nused for ATL07, ATL10, ATL20, and ATL21\n\n","type":"content","url":"/notebooks/mission-overview#file-naming-conventions-sea-ice","position":45},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL03: Global Geolocated Photon Data","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl03-global-geolocated-photon-data","position":46},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL03: Global Geolocated Photon Data","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nGeolocation, time and elevation for all photons telemetered from ATLAS\n\nPhoton classifications for each surface type\n\nGeophysical and atmospheric corrections\n\nInstrumental parameters\n\nAdvantages:\n\nEvery photon is there, and every parameter\n\nCan derive information for all surface types\n\nDisadvantages:\n\nLarge and complex product\n\nMight require applying instrumental corrections\n\nUse if you want to:\n\nLook at surfaces at a scale unresolved in higher-level products\n\nLook at processes the higher-level products were not designed to observe\n\n\n\nFigure 10:ATL03 photon data and YAPC classification\n\n","type":"content","url":"/notebooks/mission-overview#atl03-global-geolocated-photon-data","position":47},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL04 and ATL09: Atmospheric Backscatter Profiles","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl04-and-atl09-atmospheric-backscatter-profiles","position":48},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL04 and ATL09: Atmospheric Backscatter Profiles","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nAtmospheric layer heights and optical properties\n\nAdvantages:\n\nMuch larger height window provided from the atmospheric data channel\n\nDisadvantages:\n\nRelatively large file sizes\n\nUse if you want to:\n\nWant to investigate cloud or suspended particle optical depths\n\nVisualize cloud returns or Antarctic blowing snow\n\nWant to try to understand atmospheric effects on photon ground returns\n\n\n\nFigure 11:Atmospheric backscatter profiles from \n\nPalm et al. (2021)\n\n","type":"content","url":"/notebooks/mission-overview#atl04-and-atl09-atmospheric-backscatter-profiles","position":49},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL06: Land Ice Height Data","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl06-land-ice-height-data","position":50},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL06: Land Ice Height Data","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nOverlapping 40-meter linear segments fit to land and land-ice photons\n\nHeight error and segment quality estimates\n\nAdvantages:\n\nLighter product than ATL03\n\nProvides estimated surface heights with cm-level corrections\n\nDisadvantages:\n\n40 meters is too coarse for some applications\n\nOnly designed for single surface returns\n\nUse if you want to:\n\nMake large-scale repeatable measurements of glaciers and ice sheets\n\n\n\nFigure 12:ATL06 segment model \n\n(Smith et al., 2019)\n\n","type":"content","url":"/notebooks/mission-overview#atl06-land-ice-height-data","position":51},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL11: Slope-Corrected Land Ice Height Time Series","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl11-slope-corrected-land-ice-height-time-series","position":52},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL11: Slope-Corrected Land Ice Height Time Series","lvl2":"Part 2: Data Products"},"content":"Contains:\n\n120-meter along-track segments for each beam pair corrected for across-track slope\n\nCrossover estimates from ATL06 at reference points\n\nAdvantages:\n\nContains data for all cycles with along-track data following the Reference Ground Tracks (RGTs)\n\nEasy calculation of height change through time\n\nDisadvantages:\n\n120-m resolution is too coarse for some applications\n\nMay not work well over complex surfaces\n\nUse if you want to:\n\nMake large-scale estimates of glacier and ice sheet height change\n\n\n\nFigure 13:ATL11 height time series at an Antarctic grounding zone\n\n","type":"content","url":"/notebooks/mission-overview#atl11-slope-corrected-land-ice-height-time-series","position":53},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL14 and ATL15: Gridded Land Ice Height and Height Change","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl14-and-atl15-gridded-land-ice-height-and-height-change","position":54},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL14 and ATL15: Gridded Land Ice Height and Height Change","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nATL14: gridded digital elevation model (DEM) and height uncertainty at 100m posting\n\nATL15: gridded land ice height change estimates at 1km, 10km, 20km, and 40km posting\n\nAdvantages:\n\nGridded product combining all available along-track ATL11 data\n\nSimplifies volume change calculations using ICESat-2 data\n\nDisadvantages:\n\nATL14 estimates degrade where measurements are unavailable\n\nQuarter-annual temporal sampling might not be high enough for certain applications\n\nUse if you want to:\n\nUse gridded estimates of height change for ice sheet models\n\nStart creating land ice mass balance estimates from ICESat-2\n\nExtract land ice height change estimates along transects\n\n\n\n\n\nIS2view display of ATL15 height change data and extracted transect using glacier flowlines from \n\nFelikson et al. (2020).\n\n","type":"content","url":"/notebooks/mission-overview#atl14-and-atl15-gridded-land-ice-height-and-height-change","position":55},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL07: Sea Ice Height Data","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl07-sea-ice-height-data","position":56},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL07: Sea Ice Height Data","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nAlong-track heights for sea ice and leads\n\nAdvantages:\n\nHigh precision (~2 cm) height retrievals from 150-photon aggregates\n\nClassifications for varying surface types (e.g. open water leads, sea ice)\n\nProvides auxiliary information such as surface roughness and retrieval quality flags\n\nDisadvantages:\n\nSurface retrievals have varying length scales\n\nSurface type flagging is still in development\n\nUse if you want to:\n\nHave base level surface heights for freeboard or surface process studies\n\n\n\nFigure 14:ATL07 sea ice heights from \n\nKwok et al. (2019)\n\n","type":"content","url":"/notebooks/mission-overview#atl07-sea-ice-height-data","position":57},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL10: Sea Ice Freeboard Data","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl10-sea-ice-freeboard-data","position":58},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL10: Sea Ice Freeboard Data","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nAlong-track sea ice freeboard and surface heights\n\nSurface type flagging and ancillary information\n\nAdvantages:\n\nLighter product than ATL07 with higher level freeboard and surface types\n\nDisadvantages:\n\nHigher levels of missing/invalid data than ATL07 (low ice concentration, near-coastal)\n\nVarying length scales of retrievals\n\nSummer sea ice retrievals still under investigation (July 2022 field campaign)\n\nUse if you want to:\n\nUse along-track freeboard retrievals\n\nUse a highly accurate product (3 cm or better over 25 km length scales)\n\n\n\nFigure 15:ATL10 sea ice freeboards from \n\nPetty et al. (2020)\n\n","type":"content","url":"/notebooks/mission-overview#atl10-sea-ice-freeboard-data","position":59},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL20: Gridded Sea Ice Freeboard Data","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl20-gridded-sea-ice-freeboard-data","position":60},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL20: Gridded Sea Ice Freeboard Data","lvl2":"Part 2: Data Products"},"content":"Contains:\n\n25 km gridded sea ice freeboard at daily to monthly resolution\n\nAdvantages:\n\nGridded product that is lighter than ATL10\n\nDisadvantages:\n\nCoarse length scale, averages out the high resolution of the ICESat-2 data\n\nUse if you want to:\n\nLook at gridded sea ice freeboard data for large-scale determination of sea ice change\n\nMerge with other coarse-resolution data such as passive microwave products\n\n\n\nFigure 16:ATL20 gridded freeboard from \n\nKwok et al. (2019)\n\n","type":"content","url":"/notebooks/mission-overview#atl20-gridded-sea-ice-freeboard-data","position":61},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL21: Gridded Polar Sea Surface Height Data","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl21-gridded-polar-sea-surface-height-data","position":62},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL21: Gridded Polar Sea Surface Height Data","lvl2":"Part 2: Data Products"},"content":"Contains:\n\n25 km gridded sea surface height anomalies for sea ice covered regions\n\nAdvantages:\n\nGridded product that is lighter than ATL10\n\nUses a sophisticated sea surface height retrieval algorithm to detect leads in polar oceans\n\nDisadvantages:\n\nCoarse length scale, averages out the high resolution of the ICESat-2 data\n\nOnly data from center strong beam available due to time and spatially varying biases\n\nUse if you want to:\n\nLook at large-scale gridded sea surface height anomalies or derive dynamic ocean topography in polar regions\n\n\n\nFigure 17:ATL21 sea surface heights from \n\nBagnardi et al. (2021)\n\n","type":"content","url":"/notebooks/mission-overview#atl21-gridded-polar-sea-surface-height-data","position":63},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL08: Land and Vegetation Height Data","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl08-land-and-vegetation-height-data","position":64},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL08: Land and Vegetation Height Data","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nTerrain surface and canopy heights from land photons\n\nAdvantages:\n\nCan handle surfaces with multiple returns (such as vegetated canopies)\n\nProvides photon-level classifications from the ATL08 algorithm\n\nDisadvantages:\n\nCan produce less reliable results over sloping surfaces\n\nUse if you want to:\n\nDetect multiple surfaces, such as vegetated canopies or supraglacial lakes\n\nLook at vegetated terrain and need to detect the ground\n\n\n\nFigure 18:ATL08 vegetation heights (recreated a figure from Amy Neuenschwander, UT Austin)\n\n","type":"content","url":"/notebooks/mission-overview#atl08-land-and-vegetation-height-data","position":65},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL18: Gridded Land and Vegetation Height (in development)","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl18-gridded-land-and-vegetation-height-in-development","position":66},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL18: Gridded Land and Vegetation Height (in development)","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nTerrain and relative canopy heights at 1km resolution\n\nAdvantages:\n\nUses EASE2.0 grids for compatibility with other datasets\n\nWill be updated annually\n\nDisadvantages:\n\nLow spatial resolution limits creating a temporal change product\n\nUse if you want to:\n\nAnalyze large-scale vegetation and land surface change\n\n\n\nFigure 19:ATL18 gridded vegetation height (provided by Amy Neuenschwander, UT Austin)\n\n","type":"content","url":"/notebooks/mission-overview#atl18-gridded-land-and-vegetation-height-in-development","position":67},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL12: Ocean Surface Height Data","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl12-ocean-surface-height-data","position":68},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL12: Ocean Surface Height Data","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nSea surface heights for oceans deeper than 10m\n\nHarmonic coefficients and statistics for waves\n\nGeophysical (e.g. sea state bias) corrections\n\nAdvantages:\n\nAverage height estimates reduce the effects of correlated noise due to waves\n\nAlso provides sea surface heights with cm-level corrections at spatial resolutions up to 10m\n\nDisadvantages:\n\nDoes not represent the sea surface in ice covered areas\n\nUse if you want to:\n\nDetect the instantaneous sea surface height\n\n\n\nFigure 20:Comparison of ATL12 and JASON-3 from \n\nBuzzanga et al. (2021)\n\n","type":"content","url":"/notebooks/mission-overview#atl12-ocean-surface-height-data","position":69},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL19 and ATL23: Gridded Dynamic Ocean Topography","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#atl19-and-atl23-gridded-dynamic-ocean-topography","position":70},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ATL19 and ATL23: Gridded Dynamic Ocean Topography","lvl2":"Part 2: Data Products"},"content":"Contains:\n\nRasterized DOT at ¼° (mid-latitudes) and 25 km (polar) spatial resolution\n\nMonthly (ATL19) and tri-monthly (ATL23) temporal resolution\n\nAdvantages:\n\nLighter product than ATL12\n\nIncludes individual beam averages\n\nDisadvantages:\n\nLower temporal resolution than ATL12\n\nUse if you want to:\n\nCalculate the average DOT over time\n\nLook at large-scale oceanographic features\n\n\n\nFigure 21:ATL19 dynamic ocean topography\n\n\n\nFigure 22:ATL23 dynamic ocean topography\n\nATL19 and ATL23 DOT from Figures 4 and 5 of \n\nMorison et al. (2022)\n\n","type":"content","url":"/notebooks/mission-overview#atl19-and-atl23-gridded-dynamic-ocean-topography","position":71},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"Product Information at the National Snow and Ice Data Center (NSIDC)","lvl2":"Part 2: Data Products"},"type":"lvl4","url":"/notebooks/mission-overview#product-information-at-the-national-snow-and-ice-data-center-nsidc","position":72},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"Product Information at the National Snow and Ice Data Center (NSIDC)","lvl2":"Part 2: Data Products"},"content":"The NSIDC DAAC is the primary data manager for ICESat-2 data\n\nOn-prem data stores\n\nCloud-based data stores (AWS s3)\n\nMission landing page for ICESat-2 → \n\nhttps://​nsidc​.org​/data​/icesat-2\n\nProduct landing pages (e.g. ATL03) → \n\nhttps://​nsidc​.org​/data​/atl03\n\nEach product landing page includes:\n\nUser Guides\n\nAlgorithm Theoretical Basis Documents (ATBDs)\n\nData Dictionaries\n\nList of Known Issues\n\nInformation for Data Access\n\n","type":"content","url":"/notebooks/mission-overview#product-information-at-the-national-snow-and-ice-data-center-nsidc","position":73},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl2":"Part 3: Mission Status and Future"},"type":"lvl2","url":"/notebooks/mission-overview#part-3-mission-status-and-future","position":74},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl2":"Part 3: Mission Status and Future"},"content":"\n\n","type":"content","url":"/notebooks/mission-overview#part-3-mission-status-and-future","position":75},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Mission Status","lvl2":"Part 3: Mission Status and Future"},"type":"lvl4","url":"/notebooks/mission-overview#icesat-2-mission-status","position":76},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl4":"ICESat-2 Mission Status","lvl2":"Part 3: Mission Status and Future"},"content":"","type":"content","url":"/notebooks/mission-overview#icesat-2-mission-status","position":77},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Future Mission Outlook","lvl4":"ICESat-2 Mission Status","lvl2":"Part 3: Mission Status and Future"},"type":"lvl5","url":"/notebooks/mission-overview#future-mission-outlook","position":78},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Future Mission Outlook","lvl4":"ICESat-2 Mission Status","lvl2":"Part 3: Mission Status and Future"},"content":"Current Status: Nominal\n\nPerformance metrics remain nominal and within mission requirements\n\nOver 2000 days in orbit\n\nOver 2 trillion laser pulses fired\n\nLife-limiting factor is on-board fuel → dependent on solar activity","type":"content","url":"/notebooks/mission-overview#future-mission-outlook","position":79},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Mission Product Development","lvl4":"ICESat-2 Mission Status","lvl2":"Part 3: Mission Status and Future"},"type":"lvl5","url":"/notebooks/mission-overview#mission-product-development","position":80},{"hierarchy":{"lvl1":"ICESat-2 Mission Overview","lvl5":"Mission Product Development","lvl4":"ICESat-2 Mission Status","lvl2":"Part 3: Mission Status and Future"},"content":"Release-07 of along-track products to be released in mid-2025\n\nAlong-Track Coastal and Nearshore Bathymetry (ATL24) released in 2025\n\nGridded Land and Vegetation Height product (ATL18) in development\n\nGridded Sea Ice Freeboard Quicklook product (ATL20-QL) in development\n\nPossible future standard products are under development\n\n\n\n\n\nLinks\n\nWebsite: \n\nhttps://​icesat​-2​.gsfc​.nasa​.gov\n\nData: \n\nhttps://​nsidc​.org​/data​/icesat-2\n\nGitHub: \n\nhttps://​github​.com​/icesat-2","type":"content","url":"/notebooks/mission-overview#mission-product-development","position":81},{"hierarchy":{"lvl1":"Sea Ice Applications"},"type":"lvl1","url":"/notebooks/sea-ice","position":0},{"hierarchy":{"lvl1":"Sea Ice Applications"},"content":"","type":"content","url":"/notebooks/sea-ice","position":1},{"hierarchy":{"lvl1":"Sea Ice Applications","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/sea-ice#author-s","position":2},{"hierarchy":{"lvl1":"Sea Ice Applications","lvl2":"Author(s)"},"content":"Younghyun Koo, Alek Petty, Ellen Buckley","type":"content","url":"/notebooks/sea-ice#author-s","position":3},{"hierarchy":{"lvl1":"Sea Ice Applications","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/sea-ice#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Sea Ice Applications","lvl2":"Existing Notebooks"},"content":"Sea Ice Applications (2023)\n\nSea Ice Applications (2020)","type":"content","url":"/notebooks/sea-ice#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Sea Ice Applications","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/sea-ice#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Sea Ice Applications","lvl2":"Learning Outcomes"},"content":"Learn how to access/download ICESat-2 sea ice products (ATL07/ATL10/ATL20)\nvia icepyx or earthaccess libraries.\n\nExamine what the ICESat-2 sea ice freeboard products (ATL10/ATL20) look like.\n\nDerive sea ice properties (sea ice thickness, floe size distribution, lead\nfraction) using ATL10 product.\n\nMap monthly sea ice freeboard using ATL20 product.","type":"content","url":"/notebooks/sea-ice#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Sea Ice Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/sea-ice#notes","position":8},{"hierarchy":{"lvl1":"Sea Ice Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"The 2020 tutorials have an assembly of notebooks for the different ATL products.\nThe 2023 tutorial is a single notebook.","type":"content","url":"/notebooks/sea-ice#notes","position":9},{"hierarchy":{"lvl1":"Snowdepth Applications"},"type":"lvl1","url":"/notebooks/snowdepth","position":0},{"hierarchy":{"lvl1":"Snowdepth Applications"},"content":"","type":"content","url":"/notebooks/snowdepth","position":1},{"hierarchy":{"lvl1":"Snowdepth Applications","lvl2":"Author(s)"},"type":"lvl2","url":"/notebooks/snowdepth#author-s","position":2},{"hierarchy":{"lvl1":"Snowdepth Applications","lvl2":"Author(s)"},"content":"Karina Zikan","type":"content","url":"/notebooks/snowdepth#author-s","position":3},{"hierarchy":{"lvl1":"Snowdepth Applications","lvl2":"Existing Notebooks"},"type":"lvl2","url":"/notebooks/snowdepth#existing-notebooks","position":4},{"hierarchy":{"lvl1":"Snowdepth Applications","lvl2":"Existing Notebooks"},"content":"Snowdepth Applications","type":"content","url":"/notebooks/snowdepth#existing-notebooks","position":5},{"hierarchy":{"lvl1":"Snowdepth Applications","lvl2":"Learning Outcomes"},"type":"lvl2","url":"/notebooks/snowdepth#learning-outcomes","position":6},{"hierarchy":{"lvl1":"Snowdepth Applications","lvl2":"Learning Outcomes"},"content":"gain experience in working with SlideRule to access and pre-process ICESat-2\ndata\n\nlearn how use projections and interpolation to compare ICESat-2 track data\nwith gridded raster products\n\ndevelop a general understanding of how to measure snow depths with LiDAR,\nand learn about opportunities and challenges when using ICEsat-2 along-track\nproducts","type":"content","url":"/notebooks/snowdepth#learning-outcomes","position":7},{"hierarchy":{"lvl1":"Snowdepth Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"type":"lvl3","url":"/notebooks/snowdepth#notes","position":8},{"hierarchy":{"lvl1":"Snowdepth Applications","lvl3":"Notes","lvl2":"Learning Outcomes"},"content":"","type":"content","url":"/notebooks/snowdepth#notes","position":9},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine"},"type":"lvl1","url":"/notebooks/visualization","position":0},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine"},"content":"By Philipp Arndt, Chancelor Roberts Scripps Institution of Oceanography, University of California San Diego Github: \n\n, \n\n Contact: \n\nccroberts@ucsd.edu","type":"content","url":"/notebooks/visualization","position":1},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Learning Objectives"},"type":"lvl2","url":"/notebooks/visualization#learning-objectives","position":2},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Learning Objectives"},"content":"Discover some interesting ICESat-2 data by browsing \n\nOpenAltimetry\n\nGet the data into a Jupyter Notebook, plot it and overlay the ground track on a map\n\nUse \n\nGoogle Earth Engine to find the closest-in-time Sentinel-2 image that is cloud-free along ICESat-2’s gound track\n\nMake a plot from ICESat-2 data and contemporaneous imagery in Jupyter/matplotlib\n\nBonus Code: Use Google Earth Engine to extract Sentinel-2 data along the ICESat-2 ground track\n\n","type":"content","url":"/notebooks/visualization#learning-objectives","position":3},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Computing environment"},"type":"lvl2","url":"/notebooks/visualization#computing-environment","position":4},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Computing environment"},"content":"We’ll be using the following Python libraries in this notebook:\n\n#%matplotlib widget \nimport os\nimport ee\nimport geemap\nimport requests\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pylab as plt\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom ipywidgets import Layout\nimport rasterio as rio\nfrom rasterio import plot as rioplot\nfrom rasterio import warp\n\nThe import below is a class that I wrote myself. It helps us read and store data from the OpenAltimetry API.If you are interested in how this works, you can find the code in utils/oa.py.\n\nimport utils.oa as oa\nfrom utils.oa import dataCollector\n\n%load_ext autoreload\n%autoreload 2\n\n","type":"content","url":"/notebooks/visualization#computing-environment","position":5},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Google Earth Engine Authentication and Initialization"},"type":"lvl2","url":"/notebooks/visualization#google-earth-engine-authentication-and-initialization","position":6},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Google Earth Engine Authentication and Initialization"},"content":"GEE requires you to authenticate your access, so if ee.Initialize() does not work you first need to run ee.Authenticate(). This gives you a link at which you can use your google account that is associated with GEE to get an authorization code. Copy the authorization code into the input field and hit enter to complete authentication.\n\ntry:\n    ee.Initialize()\nexcept: \n    ee.Authenticate()\n    ee.Initialize()\n\n","type":"content","url":"/notebooks/visualization#google-earth-engine-authentication-and-initialization","position":7},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Downloading data from the OpenAltimetry API"},"type":"lvl2","url":"/notebooks/visualization#downloading-data-from-the-openaltimetry-api","position":8},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Downloading data from the OpenAltimetry API"},"content":"Let’s say we have found some data that looks weird to us, and we don’t know what’s going on.","type":"content","url":"/notebooks/visualization#downloading-data-from-the-openaltimetry-api","position":9},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"A short explanation of how I got the data:","lvl2":"Downloading data from the OpenAltimetry API"},"type":"lvl3","url":"/notebooks/visualization#a-short-explanation-of-how-i-got-the-data","position":10},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"A short explanation of how I got the data:","lvl2":"Downloading data from the OpenAltimetry API"},"content":"I went to \n\nopenaltimetry.org and selected BROWSE ICESAT-2 DATA. Then I selected ATL 06 (Land Ice Height) on the top right, and switched the projection🌎 to Arctic. Then I selected August 22, 2021 in the calendar📅 on the bottom left, and toggled the cloud☁️ button to show MODIS imagery of that date. I then zoomed in on my region of interest.\n\nTo find out what ICESat-2 has to offer here, I clicked on SELECT A REGION on the top left, and drew a rectangle around that mysterious cloud. When right-clicking on that rectangle, I could select View Elevation profile. This opened a new tab, and showed me ATL06 and ATL08 elevations.\n\nIt looks like ATL06 can’t decide where the surface is, and ATL08 tells me that there’s a forest canopy on the Greenland Ice Sheet? To get to the bottom of this, I scrolled all the way down and selected 🛈Get API URL. The website confirms that the “API endpoint was copied to clipboard.” Now I can use this to access the data myself.\n\nNote: Instead of trying to find this region yourself, you can access the OpenAltimetry page shown above by going to \n\nthis annotation🏷️. Just left-click on the red box and select “View Elevation Profile”.\n\n","type":"content","url":"/notebooks/visualization#a-short-explanation-of-how-i-got-the-data","position":11},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Getting the OpenAltimetry info into python","lvl2":"Downloading data from the OpenAltimetry API"},"type":"lvl3","url":"/notebooks/visualization#getting-the-openaltimetry-info-into-python","position":12},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Getting the OpenAltimetry info into python","lvl2":"Downloading data from the OpenAltimetry API"},"content":"All we need to do is to paste the API URL that we copied from the webpage into a string.\nWe also need to specify which beam we would like to look at. The GT1R ground track looks funky, so let’s look at that one!\n\n# paste the API URL from OpenAltimetry below, and specify the beam you are interested in\noa_api_url = 'https://openaltimetry.earthdatacloud.nasa.gov/data/icesat2/elevation?minx=-25.4835556641541&miny=76.44321462688005&maxx=-21.976284749133928&maxy=77.33633089376721&zoom_level=5&beams=1,2,3,4,5,6&tracks=1236&date=2024-09-06&product=ATL06&mapType=arctic'\ngtx = 'gt1r'\n\nWe can now initialize a dataCollector object, using the copy-pasted OpenAltimetry API URL, and the beam we would like to look at. (Again, I defined this class in utils/oa.py to do some work for us in the background.)\n\nis2data = dataCollector(oaurl=oa_api_url, beam=gtx, verbose=True)\n\nAlternatively, we could use a date, track number, beam, and lat/lon bounding box as input to the dataCollector.\n\ndate = '2021-08-22'\nrgt = 909\nbeam = 'gt1r'\nlatlims = [77.5326, 77.5722]\nlonlims = [-23.9891, -23.9503]\nis2data = dataCollector(date=date, latlims=latlims, lonlims=lonlims, track=rgt, beam=beam, verbose=True)\n\nNote that this also constructs the API url for us.\n\n","type":"content","url":"/notebooks/visualization#getting-the-openaltimetry-info-into-python","position":13},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Requesting the data from the OpenAltimetry API","lvl2":"Downloading data from the OpenAltimetry API"},"type":"lvl3","url":"/notebooks/visualization#requesting-the-data-from-the-openaltimetry-api","position":14},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Requesting the data from the OpenAltimetry API","lvl2":"Downloading data from the OpenAltimetry API"},"content":"Here we use the requestData() function of the dataCollector class, which is defined in utils/oa.py. It downloads all data products that are available on OpenAltimetry based on the inputs with which we initialized our dataCollector, and writes them to pandas dataframes.\n\nis2data.requestData(verbose=True)\n\nThe data are now stored as data frames in our dataCollector object. To verify this, we can run the cell below.\n\nvars(is2data)\n\n","type":"content","url":"/notebooks/visualization#requesting-the-data-from-the-openaltimetry-api","position":15},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Plotting the ICESat-2 data"},"type":"lvl2","url":"/notebooks/visualization#plotting-the-icesat-2-data","position":16},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Plotting the ICESat-2 data"},"content":"Now let’s plot this data. Here, we are just creating an empty figure fig with axes ax.\n\n# create the figure and axis\nfig, ax = plt.subplots(figsize=[9,5])\n\n# plot the data products\natl06, = ax.plot(is2data.atl06.lat, is2data.atl06.h, c='C0', linestyle='-', label='ATL06')\natl08, = ax.plot(is2data.atl08.lat, is2data.atl08.h, c='C2', linestyle=':', label='ATL08')\nif np.sum(~np.isnan(is2data.atl08.canopy))>0:\n    atl08canopy = ax.scatter(is2data.atl08.lat, is2data.atl08.h+is2data.atl08.canopy, s=2, c='C2', label='ATL08 canopy')\n\n# add labels, title and legend\nax.set_xlabel('latitude')\nax.set_ylabel('elevation in meters')\nax.set_title('Some ICESat-2 data I found on OpenAltimetry!')\nax.legend(loc='upper left')\n\n# add some text to provide info on what is plotted\ninfo = 'ICESat-2 track {track:d}-{beam:s} on {date:s}\\n({lon:.4f}E, {lat:.4f}N)'.format(track=is2data.track, \n                                                                                        beam=is2data.beam.upper(), \n                                                                                        date=is2data.date, \n                                                                                        lon=np.mean(is2data.lonlims), \n                                                                                        lat=np.mean(is2data.latlims))\ninfotext = ax.text(0.01, -0.08, info,\n                   horizontalalignment='left', \n                   verticalalignment='top', \n                   transform=ax.transAxes,\n                   fontsize=7,\n                   bbox=dict(edgecolor=None, facecolor='white', alpha=0.9, linewidth=0))\n\n# set the axis limits\nax.set_xlim((is2data.atl03.lat.min(), is2data.atl03.lat.max()))\nax.set_ylim((741, 818));\n\nLet’s add the ATL03 photons to better understand what might be going on here.\n\natl03 = ax.scatter(is2data.atl03.lat, is2data.atl03.h, s=1, color='black', label='ATL03', zorder=-1)\nax.legend(loc='upper left')\nfig.tight_layout()\ndisplay(fig)\n\n","type":"content","url":"/notebooks/visualization#plotting-the-icesat-2-data","position":17},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Saving the plot to a file","lvl2":"Plotting the ICESat-2 data"},"type":"lvl3","url":"/notebooks/visualization#saving-the-plot-to-a-file","position":18},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Saving the plot to a file","lvl2":"Plotting the ICESat-2 data"},"content":"\n\nfig.savefig('my-plot.jpg', dpi=300)\n\nTo make plots easier to produce, the dataCollector class also has a method to plot the data that we downloaded.\n\nfig = is2data.plotData();\nfig\n\n","type":"content","url":"/notebooks/visualization#saving-the-plot-to-a-file","position":19},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Ground Track Stats"},"type":"lvl2","url":"/notebooks/visualization#ground-track-stats","position":20},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Ground Track Stats"},"content":"So far we have only seen the data in elevation vs. latitude space. It’s probably good to know what the scale on the x-axis is here in units that we’re familiar with.\n\ndef dist_latlon2meters(lat1, lon1, lat2, lon2):\n    # returns the distance between two coordinate points - (lon1, lat1) and (lon2, lat2) along the earth's surface in meters.\n    R = 6371000\n    def deg2rad(deg):\n        return deg * (np.pi/180)\n    dlat = deg2rad(lat2-lat1)\n    dlon = deg2rad(lon2-lon1)\n    a = np.sin(dlat/2) * np.sin(dlat/2) + np.cos(deg2rad(lat1)) * np.cos(deg2rad(lat2)) * np.sin(dlon/2) * np.sin(dlon/2)\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    return R * c\n\nlat1, lat2 = is2data.atl08.lat[0], is2data.atl08.lat.iloc[-1]\nlon1, lon2 = is2data.atl08.lon[0], is2data.atl08.lon.iloc[-1]\n\nground_track_length = dist_latlon2meters(lat1, lon1, lat2, lon2)\nprint('The ground track is about %.1f kilometers long.' % (ground_track_length/1e3))\n\n","type":"content","url":"/notebooks/visualization#ground-track-stats","position":21},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Google Earth Engine"},"type":"lvl2","url":"/notebooks/visualization#google-earth-engine","position":22},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Google Earth Engine"},"content":"Google Earth Engine (GEE) has a large \n\ncatalog of geospatial raster data, which is ready for analysis in the cloud. It also comes with an online JavaScript code editor.\nBut since we all seem to be using python, it would be nice to have these capabilities available in our Jupyter comfort zone...\n\nThankfully, there is a \n\npython API for GEE, which we have imported using import ee earlier. It doesn’t come with an interactive map, but the python package \n\ngeemap has us covered!\n\n","type":"content","url":"/notebooks/visualization#google-earth-engine","position":23},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Show a ground track on a map","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#show-a-ground-track-on-a-map","position":24},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Show a ground track on a map","lvl2":"Google Earth Engine"},"content":"We can start working on our map by calling geemap.Map(). This just gives us a world map with a standard basemap.\n\nfrom ipywidgets import Layout\nMap = geemap.Map(layout=Layout(width='70%', max_height='450px'))\nMap\n\nNow we need to add our ICESat-2 gound track to that map. Let’s use the lon/lat coordinates of the ATL08 data product for this.We also need to specify which Coordinate Reference System (CRS) our data is in. The longitude/latitude system that we are all quite familiar with is referenced by \n\nEPSG:4326. To add the ground track to the map we need to turn it into an \n\nEarth Engine “Feature Collection”.\n\nground_track_coordinates = list(zip(is2data.atl08.lon, is2data.atl08.lat))\nground_track_projection = 'EPSG:4326' # <-- this specifies that our data longitude/latitude in degrees [https://epsg.io/4326]\ngtx_feature = ee.FeatureCollection(ee.Geometry.LineString(coords=ground_track_coordinates, \n                                      proj=ground_track_projection, \n                                      geodesic=True))\ngtx_feature\n\nNow that we have it in the right format, we can add it as a layer to the map.\n\nMap.addLayer(gtx_feature, {'color': 'red'}, 'ground track')\n\nAccording to the cell above this should be a red line. But we still can’t see it, because we first need to tell the map where to look for it.Let’s calculate the center longitude and latitude, and center the map on it.\n\ncenter_lon = (lon1 + lon2) / 2\ncenter_lat = (lat1 + lat2) / 2\nMap.setCenter(center_lon, center_lat, zoom=7);\n\nSo we actually couldn’t see it because it was in Greenland.Unfortunately the basemap here doesn’t give us much more information. Let’s add a satellite imagery basemap.\nThis is a good time to look at the layer control on the top right.\n\nMap.add_basemap('SATELLITE') # <-- this adds a layer called 'Google Satellite'\nMap.setCenter(center_lon, center_lat, zoom=7);\nMap.addLayer(gtx_feature,{'color': 'red'},'ground track')\n\n...looks like this basemap still doesn’t give us any more clues about the nature of this weird ICESat-2 data. Let’s dig deeper.\n\n","type":"content","url":"/notebooks/visualization#show-a-ground-track-on-a-map","position":25},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Query for Sentinel-2 images","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#query-for-sentinel-2-images","position":26},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Query for Sentinel-2 images","lvl2":"Google Earth Engine"},"content":"Both of these Sentinel-2 satellites take images of most places on our planet at least every week or so. Maybe these images can tell us what was happening here around the same time that ICESat-2 acquired our data?\n\nThe imagery scenes live in image collections on Google Earth Engine.You can find all collections here: \n\nhttps://​developers​.google​.com​/earth​-engine​/datasets​/catalog/\n\nThe above link tells us we can find some images under 'COPERNICUS/S2_SR_HARMONIZED'.\n\ncollection_name1 = 'COPERNICUS/S2_SR_HARMONIZED'  # Landsat 8 earth engine collection \n# https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C01_T2\n\n","type":"content","url":"/notebooks/visualization#query-for-sentinel-2-images","position":27},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl4":"Access an image collection","lvl3":"Query for Sentinel-2 images","lvl2":"Google Earth Engine"},"type":"lvl4","url":"/notebooks/visualization#access-an-image-collection","position":28},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl4":"Access an image collection","lvl3":"Query for Sentinel-2 images","lvl2":"Google Earth Engine"},"content":"To access the collection, we call ee.ImageCollection:\n\ncollection = ee.ImageCollection(collection_name1)\ncollection\n\nCan we find out how many images there are in total?\n\nnumber_of_scenes = collection.size()\nprint(number_of_scenes)\n\nActually, asking for the size of the collection does not do anything! 🤔\n\nIt just tells Earth Engine on the server-side that this variable refers to the size of the collection, which we may need later to do some analysis on the server. As long as this number is not needed, Earth Engine will not go through the trouble actually computing it.\n\nTo force Earth Engine to compute and get any information on the client side (our local machine / Cryocloud), we need to call .getInfo(). In this case that would be number_of_scenes = collection.size().getInfo().\n\nBecause this command would ask Earth Engine to count every single Sentinel-2 file that exists, this command would take a really long time to execute. I will avoid this here and just give you the answer from when I wrote this tutorial.\n\n# number_of_scenes = collection.size().getInfo()\nnumber_of_scenes = 19323842\nprint('There are %i number of scenes in the image collection' % number_of_scenes)\n\n","type":"content","url":"/notebooks/visualization#access-an-image-collection","position":29},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl4":"Filter an image collection by location and time","lvl3":"Query for Sentinel-2 images","lvl2":"Google Earth Engine"},"type":"lvl4","url":"/notebooks/visualization#filter-an-image-collection-by-location-and-time","position":30},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl4":"Filter an image collection by location and time","lvl3":"Query for Sentinel-2 images","lvl2":"Google Earth Engine"},"content":"Who wants to look at almost 20 million pictures? I don’t. So let’s try to narrow it down.Let’s start with only images that overlap with the center of our ground track.\n\n# the point of interest (center of the track) as an Earth Engine Geometry\npoint_of_interest = ee.Geometry.Point(center_lon, center_lat)\n\ncollection = collection.filterBounds(point_of_interest)\n\nprint('There are {number:d} images in the spatially filtered collection.'.format(number=collection.size().getInfo()))\n\nMuch better! Now let’s only look at images that were taken soon before or after ICESat-2 passed over this spot.\n\ndays_buffer_imagery = 6\n\ndateformat = '%Y-%m-%d'\ndatetime_requested = datetime.strptime(is2data.date, dateformat)\nsearch_start = (datetime_requested - timedelta(days=days_buffer_imagery)).strftime(dateformat)\nsearch_end = (datetime_requested + timedelta(days=days_buffer_imagery)).strftime(dateformat)\nprint('Search for imagery from {start:s} to {end:s}.'.format(start=search_start, end=search_end))\n\ncollection = collection.filterDate(search_start, search_end)\nprint('There are {number:d} images in the spatially filtered collection.'.format(number=collection.size().getInfo()))\n\nWe can also sort the collection by date ('system:time_start'), to order the images by acquisition time.\n\ncollection = collection.sort('system:time_start') \n\n","type":"content","url":"/notebooks/visualization#filter-an-image-collection-by-location-and-time","position":31},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl4":"Get image collection info","lvl3":"Query for Sentinel-2 images","lvl2":"Google Earth Engine"},"type":"lvl4","url":"/notebooks/visualization#get-image-collection-info","position":32},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl4":"Get image collection info","lvl3":"Query for Sentinel-2 images","lvl2":"Google Earth Engine"},"content":"Again, we need to use .getInfo() to actually see any information on our end. This is a python dictionary.\n\ninfo = collection.getInfo()\ntype(info)\n\nLet’s see what’s inside!\n\ninfo.keys()\n\n'features' sounds like it could hold information about the images we are trying to find...\n\nlen(info['features'])\n\nA list of 34 things! Those are probably the 34 images in the collection. Let’s pick the first one and dig deeper!\n\nfeature_number = 0\ninfo['features'][0].keys()\n\ninfo['features'][feature_number]['id']\n\nLooks like we found a reference to a Sentinel-2 image! Let’s look at the 'bands'.\n\nfor band in info['features'][feature_number]['bands']:\n    print(band['id'], end=', ')\n\n'properties' could be useful too!\n\ninfo['features'][0]['properties'].keys()\n\nThat’s a lot going on right there! But 'GRANULE_ID' is probably useful. Let’s go through all our features and print the product id.\n\nfor feature in info['features']:\n    print(feature['properties']['GRANULE_ID'])\n\n","type":"content","url":"/notebooks/visualization#get-image-collection-info","position":33},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Add a Sentinel-2 image to the map","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#add-a-sentinel-2-image-to-the-map","position":34},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Add a Sentinel-2 image to the map","lvl2":"Google Earth Engine"},"content":"The visible bands in Sentinel-2 are 'B2':blue, 'B3':green, 'B4':red.So to show a “true color” RGB composite image on the map, we need to select these bands in the R-G-B order:\n\nmyImage = collection.first()\nmyImage_RGB = myImage.select('B4', 'B3', 'B2')\nvis_params = {'min': 0.0, 'max': 10000, 'opacity': 1.0, 'gamma': 1.5}\nMap.addLayer(myImage_RGB, vis_params, name='my image')\nMap.addLayer(gtx_feature,{'color': 'red'},'ground track')\nMap\n\nThis seems to have worked. But there’s clouds everywhere.\n\n","type":"content","url":"/notebooks/visualization#add-a-sentinel-2-image-to-the-map","position":35},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Calculate the along-track cloud probability","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#calculate-the-along-track-cloud-probability","position":36},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Calculate the along-track cloud probability","lvl2":"Google Earth Engine"},"content":"We need a better approach to get anywhere here. To do this, we use not only the \n\nSentinel-2 Surface Reflectance image collection, but also merge it with the \n\nSentinel-2 cloud probability collection, which can be accessed under COPERNICUS/S2_CLOUD_PROBABILITY.\n\nLet’s specify a function that adds the cloud probability band to each Sentinel-2 image and calcultes the mean cloud probability in the neighborhood of the ICESat-2 ground track, then map this function over our location/date filtered collection.\n\ndef get_sentinel2_cloud_collection(is2data, days_buffer=6, gt_buffer=100):\n    \n    # create the area of interest for cloud likelihood assessment\n    ground_track_coordinates = list(zip(is2data.atl08.lon, is2data.atl08.lat))\n    ground_track_projection = 'EPSG:4326' # our data is lon/lat in degrees [https://epsg.io/4326]\n    gtx_feature = ee.Geometry.LineString(coords=ground_track_coordinates,\n                                     proj=ground_track_projection,\n                                     geodesic=True)\n    area_of_interest = gtx_feature.buffer(gt_buffer)\n    \n    datetime_requested = datetime.strptime(is2data.date, '%Y-%m-%d')\n    start_date = (datetime_requested - timedelta(days=days_buffer)).strftime('%Y-%m-%dT%H:%M:%S')\n    end_date = (datetime_requested + timedelta(days=days_buffer)).strftime('%Y-%m-%dT%H:%M:%S')\n    print('Search for imagery from {start:s} to {end:s}.'.format(start=start_date, end=end_date))\n    \n    # Import and filter S2 SR HARMONIZED\n    s2_sr_collection = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')\n        .filterBounds(area_of_interest)\n        .filterDate(start_date, end_date))\n\n    # Import and filter s2cloudless.\n    s2_cloudless_collection = (ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')\n        .filterBounds(area_of_interest)\n        .filterDate(start_date, end_date))\n\n    # Join the filtered s2cloudless collection to the SR collection by the 'system:index' property.\n    cloud_collection = ee.ImageCollection(ee.Join.saveFirst('s2cloudless').apply(**{\n        'primary': s2_sr_collection, 'secondary': s2_cloudless_collection,\n        'condition': ee.Filter.equals(**{'leftField': 'system:index','rightField': 'system:index'})}))\n\n    cloud_collection = cloud_collection.map(lambda img: img.addBands(ee.Image(img.get('s2cloudless')).select('probability')))\n    \n    def set_is2_cloudiness(img, aoi=area_of_interest):\n        cloudprob = img.select(['probability']).reduceRegion(reducer=ee.Reducer.mean(), \n                                                             geometry=aoi, \n                                                             bestEffort=True, \n                                                             maxPixels=1e6)\n        return img.set('ground_track_cloud_prob', cloudprob.get('probability'))\n    \n    return cloud_collection.map(set_is2_cloudiness)\n\nGet this collection for our ICESat-2 data, and print all the granule IDs and associated cloudiness over the ground track.\n\ncollection = get_sentinel2_cloud_collection(is2data)\ninfo = collection.getInfo()\nfor feature in info['features']:\n    print('%s --> along-track cloud probability: %5.1f %%' % (feature['properties']['GRANULE_ID'],\n                                                              feature['properties']['ground_track_cloud_prob']))\n\n","type":"content","url":"/notebooks/visualization#calculate-the-along-track-cloud-probability","position":37},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Filter cloudy images","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#filter-cloudy-images","position":38},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Filter cloudy images","lvl2":"Google Earth Engine"},"content":"We specify a certain cloud probability threshold, and then only keep the images that fall below it. Here we are choosing a quite aggressive value of maximum 5% cloud probability...\n\n# filter by maximum allowable cloud probability (in percent)\nMAX_CLOUD_PROB_ALONG_TRACK = 5\ncloudfree_collection = collection.filter(ee.Filter.lt('ground_track_cloud_prob', MAX_CLOUD_PROB_ALONG_TRACK))\nprint('There are %i cloud-free scenes.' % cloudfree_collection.size().getInfo())\n\n","type":"content","url":"/notebooks/visualization#filter-cloudy-images","position":39},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Sort the collection by time difference from the ICESat-2 overpass","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#sort-the-collection-by-time-difference-from-the-icesat-2-overpass","position":40},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Sort the collection by time difference from the ICESat-2 overpass","lvl2":"Google Earth Engine"},"content":"Using the image property 'system:time_start' we can calculate the time difference from the ICESat-2 overpass and set it as a property. This allows us to sort the collection by it and to make sure that the first image in the collection is the closest-in-time to ICESat-2 image that is also cloud-free.\n\n# get the time difference between ICESat-2 overpass and Sentinel-2 acquisitions, set as image property\nis2time = is2data.date + 'T12:00:00'\ndef set_time_difference(img, is2time=is2time):\n    timediff = ee.Date(is2time).difference(img.get('system:time_start'), 'second').abs()\n    return img.set('timediff', timediff)\ncloudfree_collection = cloudfree_collection.map(set_time_difference).sort('timediff')\n\nPrint some stats for the final collection to make sure everything looks alright.\n\ninfo = cloudfree_collection.getInfo()\nfor feature in info['features']:\n    s2datetime = datetime.fromtimestamp(feature['properties']['system:time_start']/1e3)\n    is2datetime = datetime.strptime(is2time, '%Y-%m-%dT%H:%M:%S')\n    timediff = s2datetime - is2datetime\n    timediff -= timedelta(microseconds=timediff.microseconds)\n    diffsign = 'before' if timediff < timedelta(0) else 'after'\n    print('%s --> along-track cloud probability: %5.1f %%, %s %7s ICESat-2' % (feature['properties']['GRANULE_ID'],\n              feature['properties']['ground_track_cloud_prob'],np.abs(timediff), diffsign))\n\n","type":"content","url":"/notebooks/visualization#sort-the-collection-by-time-difference-from-the-icesat-2-overpass","position":41},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Show the final image and ground track on the map","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#show-the-final-image-and-ground-track-on-the-map","position":42},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Show the final image and ground track on the map","lvl2":"Google Earth Engine"},"content":"\n\nfirst_image_rgb = cloudfree_collection.first().select('B4', 'B3', 'B2')\nMap = geemap.Map(layout=Layout(width='70%', max_height='450px'))\nMap.add_basemap('SATELLITE')\nMap.addLayer(first_image_rgb, vis_params, name='my image')\nMap.addLayer(gtx_feature,{'color': 'red'},'ground track')\nMap.centerObject(gtx_feature, zoom=12)\nMap\n\n","type":"content","url":"/notebooks/visualization#show-the-final-image-and-ground-track-on-the-map","position":43},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Download images from Earth Engine","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#download-images-from-earth-engine","position":44},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Download images from Earth Engine","lvl2":"Google Earth Engine"},"content":"We can use \n\n.getDownloadUrl() on an Earth Engine image.\n\nIt asks for a scale, which is just the pixel size in meters (10 m for Sentinel-2 visible bands). It also asks for the region we would like to export; here we use a \n\n.buffer around the center.\n\n(Note: This function can only be effectively used for small download jobs because there is a request size limit. Here, we only download a small region around the ground track, and convert the image to an 8-bit RGB composite to keep file size low. For larger jobs you should use \n\nExport.image.toDrive)\n\n# create a region around the ground track over which to download data\npoint_of_interest = ee.Geometry.Point(center_lon, center_lat)\nbuffer_around_center_meters = ground_track_length*0.52\nregion_of_interest = point_of_interest.buffer(buffer_around_center_meters)\n\n# make the image 8-bit RGB\ns2rgb = first_image_rgb.unitScale(ee.Number(0), ee.Number(10000)).clamp(0.0, 1.0).multiply(255.0).uint8()\n\n# get the download URL\ndownloadURL = s2rgb.getDownloadUrl({'name': 'mySatelliteImage',\n                                          'crs': s2rgb.projection().crs(),\n                                          'scale': 10,\n                                          'region': region_of_interest,\n                                          'filePerBand': False,\n                                          'format': 'GEO_TIFF'})\ndownloadURL\n\nWe can save the content of the download URL with the \n\nrequests library.\n\nresponse = requests.get(downloadURL)\nfilename = 'my-satellite-image.tif'\nwith open(filename, 'wb') as f:\n    f.write(response.content)\nprint('Downloaded %s' % filename)\n\n","type":"content","url":"/notebooks/visualization#download-images-from-earth-engine","position":45},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Open a GeoTIFF in rasterio","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#open-a-geotiff-in-rasterio","position":46},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Open a GeoTIFF in rasterio","lvl2":"Google Earth Engine"},"content":"Now that we have saved the file, we can open it locally with the \n\nrasterio library.\n\nmyImage = rio.open(filename)\nmyImage\n\n","type":"content","url":"/notebooks/visualization#open-a-geotiff-in-rasterio","position":47},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Plot a GeoTIFF in Matplotlib","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#plot-a-geotiff-in-matplotlib","position":48},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"Plot a GeoTIFF in Matplotlib","lvl2":"Google Earth Engine"},"content":"Now we can easily plot the image in a matplotlib figure, just using the \n\nrasterio.plot() module.\n\nfig, ax = plt.subplots(figsize=[4,4])\nrioplot.show(myImage, ax=ax);\n\n","type":"content","url":"/notebooks/visualization#plot-a-geotiff-in-matplotlib","position":49},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"transform the ground track into the image CRS","lvl2":"Google Earth Engine"},"type":"lvl3","url":"/notebooks/visualization#transform-the-ground-track-into-the-image-crs","position":50},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl3":"transform the ground track into the image CRS","lvl2":"Google Earth Engine"},"content":"Because our plot is now in the Antarctic Polar Stereographic Coordrinate Reference System, we need to project the coordinates of the ground track from lon/lat values. The \n\nrasterio.warp.transform function has us covered. From then on, it’s just plotting in Matplotlib.\n\ngtx_x, gtx_y = warp.transform(src_crs='epsg:4326', dst_crs=myImage.crs, xs=is2data.atl08.lon, ys=is2data.atl08.lat)\nax.plot(gtx_x, gtx_y, color='red', linestyle='-')\nax.axis('off')\n\n","type":"content","url":"/notebooks/visualization#transform-the-ground-track-into-the-image-crs","position":51},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/visualization#summary","position":52},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"Summary"},"content":"🎉 Congratulations! You’ve completed this tutorial and have seen how we can put ICESat-2 photon-level data into context using Google Earth Engine and the OpenAltimetry API.\n\nYou can explore a few more use cases for this code (and possible solutions for Exercise 2) in \n\nthis notebook.\n\n","type":"content","url":"/notebooks/visualization#summary","position":53},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"References"},"type":"lvl2","url":"/notebooks/visualization#references","position":54},{"hierarchy":{"lvl1":"Interactive Visualizion with Open Altimetry & Google Earth Engine","lvl2":"References"},"content":"To further explore the topics of this tutorial see the following detailed documentation:\n\nThe OpenAltimetry API\n\nGoogle Earth Engine JavaScript and Python Guides\n\nTutorial on Sentinel-2 cloud masking with s2cloudless\n\nThe geemap package and \n\ntutorials","type":"content","url":"/notebooks/visualization#references","position":55}]}